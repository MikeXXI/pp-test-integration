name: Build, Test and Deploy React Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_test:
    permissions:
      contents: write
      pull-requests: write
      actions: write
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installer les dépendances
        run: npm install

      - name: Build et Test
        run: |
          npm run build --if-present
          npm test
      # Étape de débogage pour vérifier les fichiers dans le répertoire build
      - name: Vérifier les fichiers générés
        run: |
          echo "Contenu du répertoire build:"
          ls -l build  # Liste les fichiers dans le répertoire build

      - name: Générer version
        run: |
          npm i -g semver
          echo "GITHUB_VERSION_BUILD=$(semver 0.1.1 -i prerelease)" >> $GITHUB_ENV

      - name: Vérifier si le répertoire Git est propre
        run: |
          git status
          git diff
          git diff --cached

      - name: Nettoyer les modifications non suivies
        run: git reset --hard # Cela réinitialise le répertoire à son dernier commit

      - name: Mise à jour du versioning
        run: |
          git config --global user.email "mickael.djegherif@outlook.fr"
          git config --global user.name "Mike"
          
          # Utilisation de semver pour générer une nouvelle version
          npm version prerelease --preid=${{ github.run_id }} --no-git-tag-version
          # Ajout de la nouvelle version au fichier README.md
          echo "Version: $(cat package.json | jq -r .version)" >> README.md
          # Commit et push
          git add README.md
          git commit -m "new version $(cat package.json | jq -r .version)"
          git push origin HEAD:master

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          slug: MikeXXI/pp-test-integration

      - name: Générer JSDoc
        run: npm run jsdoc

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: build
          path: build
          retention-days: 30

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build_test

    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout du code (nécessaire pour le déploiement)
        uses: actions/checkout@v4

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          artifact-name: build
